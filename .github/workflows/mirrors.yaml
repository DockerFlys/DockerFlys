name: Mirror Docker Image

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]

jobs:
  push_to_registries:
    name: sync Image to Registrys
    runs-on: self-hosted
    permissions:
      packages: write
      contents: read
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
      - name: Log in to Docker Hub
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
        if: ( !cancelled() )
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # - name: Log in to GitHub registry
      #   uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
      #   if: ( !cancelled() )
      #   with:
      #     registry: ghcr.io
      #     username: ${{ github.actor }}
      #     password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Log in to Tencent registry GZ
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        if: ( !cancelled() )
        with:
          registry: ccr.ccs.tencentyun.com
          username: ${{ secrets.DOCKER_USERNAME_TENCENT }}
          password: ${{ secrets.DOCKER_PASSWORD_TENCENT }}

      - name: Log in to Tencent registry USW
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: uswccr.ccs.tencentyun.com
          username: ${{ secrets.DOCKER_USERNAME_TENCENT }}
          password: ${{ secrets.DOCKER_PASSWORD_TENCENT }}

      - name: Log in to Aliyun registry HZ
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        if: ( !cancelled() )
        with:
          registry: registry.cn-hangzhou.aliyuncs.com
          username: ${{ secrets.DOCKER_USERNAME_ALIYUN }}
          password: ${{ secrets.DOCKER_PASSWORD_ALIYUN }}

      - name: Log in to Aliyun registry USW
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: registry.us-west-1.aliyuncs.com
          username: ${{ secrets.DOCKER_USERNAME_ALIYUN }}
          password: ${{ secrets.DOCKER_PASSWORD_ALIYUN }}

      - name: Mirror Docker images
        if: ( !cancelled() )
        run: |
            # 1 根据配置文件生成需要拉取的所有镜像列表和需要推送的目标镜像列表
            # 2 逐一检查，确认所有目标镜像是否存在
            # 3 拉取不存在的目标镜像的源，并向目标镜像仓库推送

            while IFS= read -r line; do
                name=$(echo "$line" | awk -F'/' '{print $NF}' | sed 's/\[.*//')
                source=$(echo "$line" | awk '{print $1}' | sed 's/\[.*//') 
                if [[ $line =~ \[([^]]+)\] ]]; then
                    inside_bracket="${BASH_REMATCH[1]}"
                    IFS=';' read -ra bracket_parts <<< "$inside_bracket"
                    for version in "${bracket_parts[@]}"; do
                        needpull=false
                        for registry in uswccr.ccs.tencentyun.com ccr.ccs.tencentyun.com registry.us-west-1.aliyuncs.com registry.cn-hangzhou.aliyuncs.com;do
                          # 逐个检查目标是否存在
                          if [ $(docker manifest inspect -v  ${registry}/${{ secrets.DOCKER_USERNAME }}/${name}:${version}|jq ".Descriptor.size") == '' ] ; then
                              needpull=true
                              echo "${source}:${version}"
                              break
                          fi
                        done
                        if [ ${needpull} ]; then
                            # 只要一个目标镜像不存在，拉下来以后都推送一轮 
                            docker pull ${source}:${version} &> /dev/null
                            for registry in uswccr.ccs.tencentyun.com ccr.ccs.tencentyun.com registry.us-west-1.aliyuncs.com registry.cn-hangzhou.aliyuncs.com;do
                              docker tag ${source}:${version} ${registry}/${{ secrets.DOCKER_USERNAME }}/${name}:${version} &> /dev/null
                              screen -dmS push-${registry}-${name} docker push ${registry}/${{ secrets.DOCKER_USERNAME }}/${name}:${version}
                            done
                        fi
                    done
                fi
            done < "${GITHUB_WORKSPACE}/registrys.txt"
            echo "当前推送任务："
            while [ $(screen -ls|grep push | wc -l|awk '{print int($0)}') -ne 0 ] 
            do
                echo "推送中，waitting..."
                sleep 30
                screen -wipe ||true &> /dev/null
            done
            echo "推送完毕"
            docker system prune -af
            exit 0
        shell: bash
      - name: Dayly Artifact Cleanup
        uses: jimschubert/delete-artifacts-action@v1
        with:
          log_level: 'error'
          min_bytes: '0'
      - name: Clean Up
        uses: AutoModality/action-clean@v1